---

- name: Install requirements
  apt:
    name: "{{item}}"
  with_items: [apt-transport-https, curl, software-properties-common]

- name: Install Docker Key (Debian)
  apt_key:
    id: "{{docker_keysig}}"
    keyserver: "{{docker_keyserver}}"

- name: Install Docker Repository (Debian)
  apt_repository:
    repo: "{{docker_repo}}"

- name: Install Docker
  apt:
    name: docker-engine

# - name: Setup Docker Service
  # template: src=docker.service dest=/etc/systemd/system/docker.service mode=0755
  # register: docker_service

# - shell: systemctl daemon-reload
  # when: docker_service.changed

# - shell: systemctl restart docker
  # when: docker_service.changed

- name: Configure Docker
  template:
    src: docker.j2
    dest: /etc/default/docker
  notify: docker restart

- name: Ensure Docker is running
  service:
    enabled: yes
    name: docker
    state: started

- name: Install docker-py
  shell: python -m pip install docker-py=={{docker_python_version}}
  when: docker_python

- name: Add users to docker group
  user:
    append: yes
    groups: docker
    name: "{{item}}"
  with_items: "{{docker_users}}"

- name: Load docker images
  docker:
    docker_api_version: "{{docker_api_version}}"
    image: "{{item}}"
    state: present
  with_items: "{{docker_images}}"

- name: Install docker-compose pt.1
  get_url:
    url: "{{docker_compose_release}}/docker-compose-{{ansible_system}}-{{ansible_machine}}"
    dest: /usr/local/bin/docker-compose
  when: docker_compose_release != ""
  register: docker_compose_download

- name: Install docker-compose pt.2
  file: name=/usr/local/bin/docker-compose mode=0755
  when: docker_compose_download.changed

- name: Run docker containers
  docker:
    command: "{{item.command|default(omit)}}"
    env: "{{item.env|default(omit)}}"
    hostname: "{{item.hostname|default(omit)}}"
    image: "{{item.image|default(item.name)}}"
    name: "{{item.name}}"
    net: "{{item.net|default(omit)}}"
    ports: "{{item.ports|default(omit)}}"
    pull: "{{item.pull|default('always')}}"
    restart_policy: "{{item.restart_policy|default('always')}}"
    state: "{{item.state|default('reloaded')}}"
    volumes: "{{item.volumes|default(omit)}}"
  with_items: "{{docker_run}}"
