---

- name: Ensure old versions of Docker are not installed.
  package:
    name:
      - docker
      - docker-engine
    state: absent

- name: Ensure dependencies are installed.
  apt:
    name:
      - apt-transport-https
      - ca-certificates
      - "{{ 'gnupg' if ansible_distribution == 'Ubuntu' or ansible_distribution_version is version('20.04', '>=') else 'gnupg2' }}"
    state: present

- name: Install requirements
  apt:
    name: "{{item}}"
  with_items: [apt-transport-https, ca-certificates, curl, gnupg-agent, software-properties-common]

- name: Install Docker Key (Debian)
  apt_key:
    id: "{{docker_apt_key_id}}"
    url: "{{docker_apt_key_url}}"

- name: Install Docker Repository (Debian)
  apt_repository:
    repo: "{{docker_apt_repo}}"
    update_cache: true

- name: Install Docker
  apt:
    name: "{{docker_package}}"

- name: Configure Docker
  template:
    src: docker.j2
    dest: /etc/default/docker
  notify: docker restart

- name: Ensure Docker is running
  service:
    enabled: yes
    name: docker
    state: started

- name: Add specific users to docker group
  user:
    append: yes
    groups: docker
    name: "{{item}}"
  with_items: "{{docker_users}}"

- name: Install Docker Compose
  get_url:
    url: "{{docker_compose_release}}/docker-compose-{{ansible_system}}-{{ansible_machine}}"
    dest: /usr/local/bin/docker-compose
    mode: 0755
  when: docker_compose_release != ""

- name: Setup logrotate
  template:
    src: logrotate
    dest: /etc/logrotate.d/docker-logs
  when: docker_logrotate

- name: Setup cron
  cron:
    name: Docker Clean
    job: "docker system prune -f"
    minute: 0
    hour: 0
  when: docker_clean

- name: Install Docker Python
  pip:
    name: "docker{{docker_python_version}}"
  when: docker_python
